This describes what to do for a release:

= TODO =

- make sure no TODO is in this file (resolve them first!)
- Check transitions in plugin status: especially from/to experimental
- Check if Elektra builds, installs and works on freshly installed OS

== Testing ==

- fuzz checker
- memleaks
- ASAN


= Tasks before Release =

== Updates ==

- Update doc/COMPILE.md to reflect actually tested setups
- Run scripts/dev/update-infos-status with arguments for heuristics (--auto)
- Write release notes without hash sums (move to final name, add links where to download release)
- cp doc/todo/NEWS.md doc/news/_preparation_next_release.md

== Increment Version Number ==

- CMakeLists.txt
- Increment version in output of doc/tutorials/hello-elektra.md
- Increment <Version> of libelektra4j in examples/external/java/read-keys-example/pom.xml and src/bindings/jna/README.md
- Change VERSION variable in build-server

== Check ==
- https://build.libelektra.org/job/libelektra/job/master/ must pass

= When Source Code is considered ready =

- Trigger release pipeline
- Inspect the logs from the pipeline
  - [ ] Error logs (*.error) must be empty
  - [ ] Check in the (test-*) folders if the passed tests really were successful
  - [ ] Check if version is correct in the version file
  - [ ] Check if the Debian package build log has warnings (debian/<DEBIAN_CODENAME>/elektra_*.buildinfo)
- Check if all artifacts are present
  - [ ] Check debian/<DEBIAN_CODENAME> if all Debian packages were built
- Inspect the changes to the libelektra git repository in git/
  git/master.log
  - [ ] Check diff of commit "Regenerate dot of plugins for release <VERSION>" and if 
        doc/images/plugins.pdf was generated correctly
  - [ ] Check diff of commit "Update contract for release <VERSION>": Plugin tags in the plugin 
        README.md should be sorted (Only if tags are not sorted)
  git/debian.log
  - [ ] Check if master is merged to Debian branch (commit: "merge <VERSION>")
- Inspect the changes to the docu git repository in git/docu.log
  - [ ] Check diff of the latest commit "<VERSION> release" 
- Inspect the changes to the ftp git repository in git/ftp.log
  - [ ] Check diff of the latest commit "Release <VERSION>"
- Inspect the website from the pipeline

= Publish =

- Select "process" in the stage view to publish the package
- Clean the git statistics in git/statistics and add them to the release notes (formatting, remove uninteresting data)
- Add hash sums to release notes and run linkchecker to verify that all download links of the current release are working:
  mkdir build && cd build && make html && ../scripts/link-checker external-links.txt
- (Possible) rebuilds from website for last changes in the release notes

== Preperation for next release == 

- Increment CMPVERSION in scripts/build/run_icheck 
- Cleanup tests/icheck.suppression (and add info to release notes)

== Update Alpine Linux image on docker hub ==

Now that the release is available to download, rebuild the Alpine release image.

To do so, increment the Elektra version in e.g. `scripts/docker/alpine/3.12/release.Dockerfile`:
```
ELEKTRA_RELEASE=0.9.2
```
If the file does not exist, possibly the Alpine version was changed.

== Announce ==

send out release mails&post on social media (see github issue #676)
