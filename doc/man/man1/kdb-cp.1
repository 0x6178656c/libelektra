.\" generated with Ronn-NG/v0.9.1
.\" http://github.com/apjanke/ronn-ng/tree/0.9.1
.TH "KDB\-CP" "1" "November 2020" ""
.SH "NAME"
\fBkdb\-cp\fR \- Copy keys within the key database
.SH "SYNOPSIS"
\fBkdb cp <source> <dest>\fR
.SH "DESCRIPTION"
This command copies key(s) in the Key database\. You can copy keys to another directory within the database or even below another key\. Note that you cannot copy a key below itself\.
.P
Where \fBsource\fR is the path of the key(s) you want to copy and \fBdest\fR is the path where you would like to copy the key(s) to\. Note that when using the \fB\-r\fR flag, \fBsource\fR as well as all of the keys below it will be copied\.
.SH "LIMITATIONS"
Neither \fBsource\fR nor \fBdest\fR can be a cascading key\. (Start with \fB/\fR)\. Make sure to select a namespace\.
.SH "RETURN VALUES"
This command will return the following values as an exit status:
.TP
0
No errors\.
.TP
1\-10
standard exit codes, see kdb(1) \fIkdb\.md\fR
.TP
11
No key to copy found\.
.SH "OPTIONS"
.TP
\fB\-H\fR, \fB\-\-help\fR
Show the man page\.
.TP
\fB\-V\fR, \fB\-\-version\fR
Print version info\.
.TP
\fB\-p\fR, \fB\-\-profile <profile>\fR
Use a different kdb profile\.
.TP
\fB\-C\fR, \fB\-\-color <when>\fR
Print never/auto(default)/always colored output\.
.TP
\fB\-r\fR, \fB\-\-recursive\fR
Recursively copy keys\.
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Explain what is happening\. Prints additional information in case of errors/warnings\.
.TP
\fB\-d\fR, \fB\-\-debug\fR
Give debug information\. Prints additional debug information in case of errors/warnings\.
.TP
\fB\-f\fR, \fB\-\-force\fR
Force overwriting the keys\.
.SH "EXAMPLES"
```sh # Backup\-and\-Restore: user:/tests/cp/exampleskdb set user:/tests/cp/examples/kdb\-cp/key key1 kdb set user:/tests/cp/examples/kdb\-cp/key/first key kdb set user:/tests/cp/examples/kdb\-cp/key/second key kdb set user:/tests/cp/examples/kdb\-cp/cpkey key1 kdb set user:/tests/cp/examples/kdb\-cp/cpkey/first key kdb set user:/tests/cp/examples/kdb\-cp/cpkey/second key kdb set user:/tests/cp/examples/kdb\-cp/cpkeyerror/first key kdb set user:/tests/cp/examples/kdb\-cp/cpkeyerror/second anotherValue kdb set user:/tests/cp/examples/kdb\-cp/another/key one kdb set user:/tests/cp/examples/kdb\-cp/another/value twokdb cp user:/tests/cp/examples/kdb\-cp/key user:/tests/cp/examples/kdb\-cp/key2 #>kdb cp \-r user:/tests/cp/examples/kdb\-cp/key user:/tests/cp/examples/kdb\-cp/copied #>kdb cp \-r user:/tests/cp/examples/kdb\-cp/key user:/tests/cp/examples/kdb\-cp/cpkeyerror # RET: 11kdb cp \-r user:/tests/cp/examples/kdb\-cp/key user:/tests/cp/examples/kdb\-cp/cpkey #>kdb cp \-rf user:/tests/cp/examples/kdb\-cp/key user:/tests/cp/examples/kdb\-cp/cpkeyerror #>kdb export user:/tests/cp/examples/kdb\-cp/cpkeyerror mini #> =key1 #> first=key #> second=keykdb cp \-r user:/tests/cp/examples/kdb\-cp/another user:/tests/cp/examples/kdb\-cp/another/key #>
.P
kdb rm \-r user:/tests/cp/examples/kdb\-cp/ ```
